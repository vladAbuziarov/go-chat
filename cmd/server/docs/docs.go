// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/profile": {
            "get": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's profile.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.ProfileResp200Body"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signin": {
            "post": {
                "description": "Authenticates a user and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Request Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResp200Body"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Registers a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register Request Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterResponse200Payload"
                        }
                    }
                }
            }
        },
        "/api/v1/conversations/{conversationId}/messages": {
            "get": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Retrieves messages from a specified conversation with optional pagination parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get messages from a conversation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of messages to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the last message received",
                        "name": "lastID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/message.GetMessagesResponse200Payload"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Sends a new message within a specified conversation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send a new message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Send Message Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.SendMessageRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/message.SendMessageResponse200Payload"
                        }
                    }
                }
            }
        },
        "/api/v1/conversations/{conversationId}/messages/{messageId}": {
            "post": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Updates the content of a specified message within a conversation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update a message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Message Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message.MessageUpdateRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/message.MessageUpdateResponse200Payload"
                        }
                    }
                }
            }
        },
        "/api/v1/conversations/{conversationId}/show-user-typing": {
            "post": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Records that a user is typing in a conversation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "conversations"
                ],
                "summary": "Show user typing status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/conversation.ShowUserTypingResponse200Payload"
                        }
                    }
                }
            }
        },
        "/conversations": {
            "post": {
                "security": [
                    {
                        "UserTokenAuth": []
                    }
                ],
                "description": "Creates a new conversation with specified participants.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "conversations"
                ],
                "summary": "Create a new conversation",
                "parameters": [
                    {
                        "description": "Create Conversation Request",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conversation.CreateConversationRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/conversation.CreateConversationResponse200Payload"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginRequestPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user\nrequired: true",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the user\nrequired: true",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                }
            }
        },
        "auth.LoginResp200Body": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT token for authenticated requests\nrequired: true",
                    "type": "string"
                }
            }
        },
        "auth.ProfileResp200Body": {
            "type": "object",
            "properties": {
                "profile": {
                    "description": "The user's profile information\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.User"
                        }
                    ]
                }
            }
        },
        "auth.RegisterRequestPayload": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user\nrequired: true",
                    "type": "string"
                },
                "name": {
                    "description": "Username of the user\nrequired: true",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                },
                "password": {
                    "description": "Password of the user\nrequired: true",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8
                }
            }
        },
        "auth.RegisterResponse200Payload": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "The registered user\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/users.User"
                        }
                    ]
                }
            }
        },
        "chat.Conversation": {
            "description": "Represents a chat conversation between users.",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_group": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "chat.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "conversation_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "sender_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "conversation.CreateConversationRequestPayload": {
            "type": "object",
            "required": [
                "is_group",
                "name",
                "participant_ids"
            ],
            "properties": {
                "is_group": {
                    "description": "Indicates if the conversation is a group chat\nrequired: true",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the conversation\nrequired: true",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "participant_ids": {
                    "description": "IDs of participants to be added to the conversation\nrequired: true",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "conversation.CreateConversationResponse200Payload": {
            "type": "object",
            "properties": {
                "conversation": {
                    "$ref": "#/definitions/chat.Conversation"
                }
            }
        },
        "conversation.ShowUserTypingResponse200Payload": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Indicates whether the operation was successful.\nrequired: true",
                    "type": "boolean"
                }
            }
        },
        "message.GetMessagesResponse200Payload": {
            "type": "object",
            "properties": {
                "messages": {
                    "description": "List of messages\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.Message"
                    }
                }
            }
        },
        "message.MessageUpdateRequestPayload": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Updated content of the message\nrequired: true",
                    "type": "string",
                    "maxLength": 250,
                    "minLength": 3
                }
            }
        },
        "message.MessageUpdateResponse200Payload": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "The updated message\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/chat.Message"
                        }
                    ]
                }
            }
        },
        "message.SendMessageRequestPayload": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Content of the message\nrequired: true",
                    "type": "string",
                    "maxLength": 250,
                    "minLength": 3
                }
            }
        },
        "message.SendMessageResponse200Payload": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "SendMessageResponse200Payload represents a successful response containing the sent message.\nswagger:model",
                    "allOf": [
                        {
                            "$ref": "#/definitions/chat.Message"
                        }
                    ]
                }
            }
        },
        "users.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "UserTokenAuth": {
            "type": "apiKey",
            "name": "X-User-Token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Chat Application API",
	Description:      "API documentation for the Chat Application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
